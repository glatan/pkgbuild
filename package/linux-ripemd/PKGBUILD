# Maintainer: glatan <glatan [dot] edu [at] gmail [dot] com>
# Contributor: Jan Alexander Steffens (heftig) <heftig@archlinux.org>

pkgbase='linux-ripemd'
pkgver='5.11.2.arch1'
pkgrel='1'
pkgdesc='Linux'
_srctag="v${pkgver%.*}-${pkgver##*.}"
url="https://git.archlinux.org/linux.git/log/?h=${_srctag}"
arch=('x86_64')
license=('GPL2')
makedepends=(
    'bc' 'kmod' 'libelf' 'pahole' 'cpio' 'perl' 'tar' 'xz'
    'xmlto' 'python-sphinx' 'python-sphinx_rtd_theme' 'graphviz' 'imagemagick'
    'git'
)
options=('!strip')
source=(
    "https://git.archlinux.org/linux.git/snapshot/linux-${_srctag}.tar.gz"
    'config'         		     # the main kernel config file
    'sphinx-workaround.patch'  # Sphinx 3.5 broke the build again
)
validpgpkeys=(
    'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
    '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
    'A2FF3A36AAA56654109064AB19802F8B0D70FC30'  # Jan Alexander Steffens (heftig)
)
sha512sums=(
    '88f2b53a824cb75598a3b1f1811290439e6c259605cdbac457be6d940bde529d79546e51655d25be30f54f33a59c9410bcd4c75d0eaa98840301cd437976a2f9'
    'c3dec0bafcdb033026f0e0189b8643e9f17a602ff50bfc8c37cca5541adc6d9680aebb347dabd7988f84b3efa13a12397f74eef914258b376feb2e4980d42c65'
    '93c03382b6678ce5e94a5d06e6737965629d7dc49d16e968d225e664d88f07a12abe0e04908f1cdaa75ff1cde88783cae9f0794d1075bc65bc7baeff392e0ae2'
)
b2sums=(
    '2c37775459f2b73e9c1585abda5a995fb6ce0f75e9583aceda62f11dcfbd700535abefc50e15fa9445bdd2de564b3e44798dc0f4dc95f883d224405073745ea3'
    '2d1b307b7220af423b76619abbd52ffa64198d59ddee4ee219648c8d993d92796ba1039b21431479edfac68b88f65d449cc9c53f042b8a7d91f6ddcdad30dc3f'
    'db64b425139c107c69f44624901ae50b5e604d4c9fdfe84f78c298f8ed7a7739033a72ec678c5c3c0e82e59809d97799d0c25f96c64ef5ae79910cb890fc7bfb'
)

export KBUILD_BUILD_HOST='archlinux'
export KBUILD_BUILD_USER="${pkgbase}"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
    cd "linux-${_srctag}" || exit 1

    echo 'Setting version...'
    scripts/setlocalversion --save-scmversion
    echo "-${pkgrel}" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname

    local src
    for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ ${src} = *.patch ]] || continue
    echo "Applying patch ${src}..."
    patch -Np1 < "../${src}"
    done

    echo 'Setting config...'
    cp ../config .config
    make olddefconfig

    make -s kernelrelease > version
    echo "Prepared ${pkgbase} version $(<version)"
}

build() {
    cd "linux-${_srctag}" || exit 1
    make all
    make htmldocs
}

_package() {
    pkgdesc="The ${pkgdesc} kernel and modules"
    depends=('coreutils' 'kmod' 'initramfs')
    optdepends=(
        'crda: to set the correct wireless channels of your country'
        'linux-firmware: firmware images needed for some devices'
    )
    provides=('VIRTUALBOX-GUEST-MODULES' 'WIREGUARD-MODULE')
    replaces=('virtualbox-guest-modules-arch' 'wireguard-arch')

    cd "linux-${_srctag}" || exit 1
    local kernver="$(<version)"
    local modulesdir="${pkgdir}/usr/lib/modules/${kernver}"

    echo 'Installing boot image...'
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "${modulesdir}/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "${pkgbase}" | install -Dm644 /dev/stdin "${modulesdir}/pkgbase"

    echo 'Installing modules...'
    make INSTALL_MOD_PATH="${pkgdir}/usr" INSTALL_MOD_STRIP=1 modules_install

    # remove build and source links
    rm "${modulesdir}"/{source,build}
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the ${pkgdesc} kernel"
    depends=('pahole')

    cd "linux-${_srctag}" || exit 1
    local builddir="${pkgdir}/usr/lib/modules/$(<version)/build"

    echo 'Installing build files...'
    install -Dt "${builddir}" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
    install -Dt "${builddir}/kernel" -m644 kernel/Makefile
    install -Dt "${builddir}/arch/x86" -m644 arch/x86/Makefile
    cp -t "${builddir}" -a scripts

    # add objtool for external module building and enabled VALIDATION_STACK option
    install -Dt "${builddir}/tools/objtool" tools/objtool/objtool

    # add xfs and shmem for aufs building
    mkdir -p "${builddir}"/{fs/xfs,mm}

    echo 'Installing headers...'
    cp -t "${builddir}" -a include
    cp -t "${builddir}/arch/x86" -a arch/x86/include
    install -Dt "${builddir}/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "${builddir}/drivers/md" -m644 drivers/md/*.h
    install -Dt "${builddir}/net/mac80211" -m644 net/mac80211/*.h

    # http://bugs.archlinux.org/task/13146
    install -Dt "${builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # http://bugs.archlinux.org/task/20402
    install -Dt "${builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "${builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "${builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    echo 'Installing KConfig files...'
    find . -name 'Kconfig*' -exec install -Dm644 {} "${builddir}/{}" \;

    echo 'Removing unneeded architectures...'
    local arch
    for arch in "${builddir}"/arch/*/; do
    [[ ${arch} = */x86/ ]] && continue
    echo "Removing $(basename "${arch}")"
    rm -r "${arch}"
    done

    echo 'Removing documentation...'
    rm -r "${builddir}/Documentation"

    echo 'Removing broken symlinks...'
    find -L "${builddir}" -type l -printf 'Removing %P\n' -delete

    echo 'Removing loose objects...'
    find "${builddir}" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo 'Stripping build tools...'
    local file
    while read -rd '' file; do
        case "$(file -bi "${file}")" in
            application/x-sharedlib\;*)      # Libraries (.so)
            strip -v ${STRIP_SHARED} "${file}" ;;
            application/x-archive\;*)        # Libraries (.a)
            strip -v ${STRIP_STATIC} "${file}" ;;
            application/x-executable\;*)     # Binaries
            strip -v ${STRIP_BINARIES} "${file}" ;;
            application/x-pie-executable\;*) # Relocatable binaries
            strip -v ${STRIP_SHARED} "${file}" ;;
        esac
    done < <(find "${builddir}" -type f -perm -u+x ! -name vmlinux -print0)

    echo 'Stripping vmlinux...'
    strip -v ${STRIP_STATIC} "${builddir}/vmlinux"

    echo 'Adding symlink...'
    mkdir -p "${pkgdir}/usr/src"
    ln -sr "${builddir}" "${pkgdir}/usr/src/${pkgbase}"
}

_package-docs() {
    pkgdesc="Documentation for the ${pkgdesc} kernel"

    cd "linux-${_srctag}" || exit 1
    local builddir="${pkgdir}/usr/lib/modules/$(<version)/build"

    echo 'Installing documentation...'
    local src dst
    while read -rd '' src; do
        dst="${src#Documentation/}"
        dst="${builddir}/Documentation/${dst#output/}"
        install -Dm644 "$src" "$dst"
    done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

    echo 'Adding symlink...'
    mkdir -p "${pkgdir}/usr/share/doc"
    ln -sr "${builddir}/Documentation" "${pkgdir}/usr/share/doc/${pkgbase}"
}

pkgname=("${pkgbase}" "${pkgbase}-headers" "${pkgbase}-docs")
for _p in "${pkgname[@]}"; do
    eval "package_${_p}() {
        $(declare -f "_package${_p#$pkgbase}")
        _package${_p#$pkgbase}
    }"
done
